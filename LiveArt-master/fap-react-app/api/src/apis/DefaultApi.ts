/* tslint:disable */
/* eslint-disable */
/**
 * Find and Play
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Event,
    EventFromJSON,
    EventToJSON,
    EventCertain,
    EventCertainFromJSON,
    EventCertainToJSON,
    museum,
    museumFromJSON,
    museumToJSON,
    museumCertain,
    museumCertainFromJSON,
    museumCertainToJSON,
} from '../models';

export interface EventRequest {
    event: string;
}

export interface museumRequest {
    museum: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns description of sport event
     */
    async eventRaw(requestParameters: EventRequest): Promise<runtime.ApiResponse<Array<EventCertain>>> {
        if (requestParameters.event === null || requestParameters.event === undefined) {
            throw new runtime.RequiredError('event','Required parameter requestParameters.event was null or undefined when calling event.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event}`.replace(`{${"event"}}`, encodeURIComponent(String(requestParameters.event))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventCertainFromJSON));
    }

    /**
     * Returns description of sport event
     */
    async event(requestParameters: EventRequest): Promise<Array<EventCertain>> {
        const response = await this.eventRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of sport events
     */
    async eventsRaw(): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Returns list of sport events
     */
    async events(): Promise<Array<Event>> {
        const response = await this.eventsRaw();
        return await response.value();
    }

    /**
     * Returns description of museum
     */
    async museumRaw(requestParameters: museumRequest): Promise<runtime.ApiResponse<Array<museumCertain>>> {
        if (requestParameters.museum === null || requestParameters.museum === undefined) {
            throw new runtime.RequiredError('museum','Required parameter requestParameters.museum was null or undefined when calling museum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/museums/{museum}`.replace(`{${"museum"}}`, encodeURIComponent(String(requestParameters.museum))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(museumCertainFromJSON));
    }

    /**
     * Returns description of museum
     */
    async museum(requestParameters: museumRequest): Promise<Array<museumCertain>> {
        const response = await this.museumRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns list of museums
     */
    async museumsRaw(): Promise<runtime.ApiResponse<Array<museum>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/museums`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(museumFromJSON));
    }

    /**
     * Returns list of museums
     */
    async museums(): Promise<Array<museum>> {
        const response = await this.museumsRaw();
        return await response.value();
    }

}
